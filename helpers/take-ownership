#!/bin/sh
#
# This script takes ownership of the specified file/directory.  It is friendly
# with directories mapped (mounted) to a network share.  The strategy adopted
# is to change/set ownership only for files/directories that don't already have
# the correct ownership.
#
# CIFS: Basically, ownership and permissions of files/folders of the share are
#       defined when mounting the share on the client side.  The chown/chmod
#       commands are ignored: ownership and permissions changes are not applied,
#       even when the command succeed.
#         - All files/folders have the same permissions and they cannot be
#           changed.
#         - All files/folders have the same ownership, no matter which user
#           creates the file.
#       The `noperm` mount option disables permission checks on client side.  So
#       any users can read or modify files, even if they technically could not
#       according to permissions.
#       When using an SMB share, the `USER_ID` and `GROUP_ID` environment
#       variables should match the user/group used to mount of the SMB share.
#
# NFS: The NFS mount on client side behaves like a normal folder, i.e. ownership
#      and permissions are the same between the client and the server.  However,
#      the `root` user might be handled differently depending on the server
#      configuration.
#      When the `no_root_squash` server option is set, the behavior remains the
#      same: the `root` user on the client side is mapped to the `root` user on
#      the server side.
#      Using the `root_squash` server option allows the `root` user on the
#      client side to be mapped to a different user (called anonymous user) on
#      server side.  The anonymous user can be explicitly set via `anonuid` and
#      `anongid` (the default is `nobody`, user ID 65534).  So because the
#      container applies ownership of files and folders under the `root` user,
#      we may end up in a situation where the container is not able to perform
#      this task.
#      When using an NFS share, the user may have to set ownership/permissions
#      prior starting the container, adjust `USER_ID` and `GROUP_ID` correctly
#      or adjust the NFS server options.
#

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error.

usage() {
    if [ -n "${1:-}" ]; then
        echo "ERROR: $*" >&2
        echo "" >&2
    fi

    echo "usage: $(basename "$0") [OPTION...] TARGET

Take ownership of the specified file/directory.

Options:
  --not-recursive  Take ownership of the specified directory only, not its
                   content.
  --fail           Exit with non-zero value if ownership fails to be set for at
                   least one file or folder.
  --user-id ID     ID of the user that should own the directory.  If not set,
                   the USER_ID environment variable is used.
  --group-id ID    ID of the group that should own the directory.  If not set,
                   the GROUP_ID environment variable is used.

Arguments:
  TARGET           Path to the file/directory to take ownership.
" >&2
    exit 1
}

die() {
    echo "ERROR: $*" >&2
    exit 1
}

IGNORE_ERRORS=true
RECURSIVE=true
TARGET=

while [ $# -gt 0 ]; do
    case "$1" in
        --help | -h)
            usage
            ;;
        --not-recursive)
            RECURSIVE=false
            ;;
        --fail)
            IGNORE_ERRORS=false
            ;;
        --user-id)
            if [ -n "${2-}" ]; then
                USER_ID="$2"
            else
                usage "User ID not set."
            fi
            shift
            ;;
        --group-id)
            if [ -n "${2-}" ]; then
                GROUP_ID="$2"
            else
                usage "Group ID not set."
            fi
            shift
            ;;
        --*)
            usage "Unknown option '$1'."
            ;;
        *)
            if [ -z "${TARGET:-}" ]; then
                TARGET="$1"
            else
                usage "Unknown argument '$1'."
            fi
            ;;
    esac

    shift
done

# Validate the target.
if [ -z "${TARGET:-}" ]; then
    usage "Target not set."
elif [ ! -e "${TARGET}" ]; then
    die "Target not found: ${TARGET}."
fi

# Validate the user ID.
if [ -z "${USER_ID:-}" ]; then
    die " No user ID defined."
fi

# Validate the group ID.
if [ -z "${GROUP_ID:-}" ]; then
    die "No group ID defined."
fi

# Use absolute path.
if [ -d "${TARGET}" ]; then
    TARGET="$(cd "${TARGET}" && pwd)"
else
    TARGET="$(cd "$(dirname "${TARGET}")" && pwd)/$(basename "${TARGET}")"
fi

# Create temporary file to store any chmod error.
CHMOD_RES_FILE="$(mktemp)"
echo "0" > "${CHMOD_RES_FILE}"

# Create the chmod wrapper.
CHOWN_WRAPPER="$(mktemp)"
echo "#!/bin/sh
chown \"\$@\"
rc=\$?
if [ \$rc -ne 0 ]; then
    echo \$rc > \"${CHMOD_RES_FILE}\"
fi" > "${CHOWN_WRAPPER}"

# Define extra find arguments needed when recursivity is disabled.
FIND_EXTRA_ARGS=
if ! ${RECURSIVE}; then
    FIND_EXTRA_ARGS="-mindepth 0 -maxdepth 0"
fi

# Workaround for bug with the `find` utilities, where a user/group ID bigger
# than a signed integer produces an error: instead of using the ID, use the
# associated user/group name if it exists.
# See https://savannah.gnu.org/bugs/index.php?64900
USER_NAME="$(getent passwd "${USER_ID}" | cut -d: -f1)"
if [ -n "${USER_NAME:-}" ]; then
    USER_ID="${USER_NAME}"
fi
GROUP_NAME="$(getent group "${GROUP_ID}" | cut -d: -f1)"
if [ -n "${GROUP_NAME:-}" ]; then
    GROUP_ID="${GROUP_NAME}"
fi

# Set ownership on files and folders.
# shellcheck disable=2086
find "${TARGET}" ${FIND_EXTRA_ARGS} '(' -not -user "${USER_ID}" -or -not -group "${GROUP_ID}" ')' -exec /bin/sh "${CHOWN_WRAPPER}" --no-dereference "${USER_ID}:${GROUP_ID}" {} +

# Handle the result.
result="$(cat "${CHMOD_RES_FILE}")"
rm "${CHMOD_RES_FILE}" "${CHOWN_WRAPPER}"
if ${IGNORE_ERRORS}; then
    exit 0
else
    exit "${result}"
fi

# vim:ft=sh:ts=4:sw=4:et:sts=4
