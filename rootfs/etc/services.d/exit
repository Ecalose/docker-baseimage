#!/bin/sh
#
# This is invoked by cinit when it exits.
#

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error.

STAGE=finish

EXIT_CODE=${1:-1}

MIN_LOG_PREFIX_LENGTH=12

log() {
    case "$1" in
        :::*)
            echo "$*" | cut -c 4-
            ;;
        *)
            printf "[%-${MIN_LOG_PREFIX_LENGTH}s] " "${STAGE}"
            echo "$*"
            ;;
    esac
}

log_script() {
    while IFS= read -r output; do
        case "${output}" in
            :::*) log "${output}" ;;
            *) log "$1: ${output}" ;;
        esac
    done
}

set_min_log_prefix_length() {
    find /etc/services.d -maxdepth 1 -type d | while read -r dir; do
        if [ "${#dir}" -gt "${MIN_LOG_PREFIX_LENGTH}" ]; then
            MIN_LOG_PREFIX_LENGTH="${#dir}"
        fi
    done
}

set_min_log_prefix_length

# Invoke finish scripts.
log "executing container finish scripts..."
if [ -d /etc/cont-finish.d ]; then
    find /etc/cont-finish.d -maxdepth 1 -type f | sort | while read -r fpath; do
        fname="$(basename "${fpath}")"

        if [ ! -x "${fpath}" ]; then
            echo "WARNING: not executable, ignoring." | log_script "${fname}"
            continue
        fi
        echo "executing..." | log_script "${fname}"

        rc_file="$(mktemp)"
        (
            set +e
            ${fpath}
            echo $? > "${rc_file}"
        ) | log_script "${fname}"
        read -r rc < "${rc_file}"
        rm -f "${rc_file}"

        if [ "${rc}" -eq 0 ]; then
            echo "terminated successfully." | log_script "${fname}"
        else
            echo "terminated with error ${rc}." | log_script "${fname}"
        fi
    done
fi
log "all container finish scripts executed."

exit "${EXIT_CODE}"

# vim:ft=sh:ts=4:sw=4:et:sts=4
