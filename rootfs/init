#!/bin/sh
#
# This is the system init of the container, i.e. the first script executed when
# the container starts.
#

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error.

# Make sure to use our own `PATH` value, ignoring the one that could have been
# set during creation of the container.
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/base/sbin:/opt/base/bin

STAGE=init

MIN_LOG_PREFIX_LENGTH=12

log() {
    case "$1" in
        :::*)
            echo "$*" | cut -c 4-
            ;;
        *)
            printf "[%-${MIN_LOG_PREFIX_LENGTH}s] " "${STAGE}"
            echo "$*"
            ;;
    esac
}

log_script() {
    while IFS= read -r output; do
        case "${output}" in
            :::*) log "${output}" ;;
            *) log "$1: ${output}" ;;
        esac
    done
}

set_min_log_prefix_length() {
    find /etc/services.d -maxdepth 1 -type d | while read -r dir; do
        if [ "${#dir}" -gt "${MIN_LOG_PREFIX_LENGTH}" ]; then
            MIN_LOG_PREFIX_LENGTH="${#dir}"
        fi
    done
}

valid_env_var_name() {
    case "$1" in
        *[!a-zA-Z0-9_]* | [0-9]*)
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

load_env_var() {
    var_name="$1"
    var_val="$2"
    # Use the parameter expansion '${parameter+word}': we want to set
    # the environment variable only when *unset*. If the variable is
    # already set, with null or a value, we need to skip it.
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02
    var_test="$(eval echo \$\{"${var_name}"+x\})"
    if [ -z "${var_test}" ]; then
        export "${var_name}"="${var_val}"
        echo "export ${var_name}=\"${var_val}\"" >> /var/tmp/.cont-env-internal
    fi
}

set_min_log_prefix_length

log "container is starting..."

# Set the default umask, just in case the distro decided to set something else.
umask 022

# Install container environment variables.
STAGE=cont-env
log "loading container environment variables..."
if [ -d /etc/cont-env.d ]; then
    flist="$(mktemp)"
    find /etc/cont-env.d -maxdepth 1 -type f | sort > "${flist}"
    exec 3< "${flist}" # Open for reading on file descriptor 3.
    while read -r fpath; do
        fname="$(basename "${fpath}")"

        if ! valid_env_var_name "${fname}"; then
            log "invalid environment variable name: ${fname}"
            exit 1
        fi

        if [ -x "${fpath}" ]; then
            # The file is an executable. The value of the environment variable
            # is the stdout of the program. Anything printed to stderr is
            # redirected to the container's log.

            echo "executing..." | log_script "${fname}"

            # Create a file to store the stderr output of the program.
            cmd_out="$(mktemp)"

            # Execute the program.
            set +e
            val="$(${fpath} 2> "${cmd_out}")"
            rc="$?"
            set -e

            # Log any stderr output from the program.
            log_script "${fname}" < "${cmd_out}"

            # Remove file used to store the stderr output of the program.
            rm "${cmd_out}"

            if [ "${rc}" -eq 0 ] || [ "${rc}" -eq 100 ]; then
                echo "terminated successfully." | log_script "${fname}"
            else
                echo "terminated with error ${rc}." | log_script "${fname}"
                exit "${rc}"
            fi

            # Load the environment variable in case of success.
            if [ "${rc}" -eq 0 ]; then
                echo "loading..." | log_script "${fname}"
                load_env_var "${fname}" "$(echo "${val}" | head -n1)"
            else
                echo "not setting variable." | log_script "${fname}"
            fi
        else
            echo "loading..." | log_script "${fname}"
            load_env_var "${fname}" "$(head -n1 < "${fpath}")"
        fi
    done <&3
    exec 3>&- # Close file descriptor.
    rm "${flist}"
fi
log "container environment variables initialized."

# Export Docker secrets as environment variables.
STAGE=cont-secrets
log "loading container secrets..."
if [ -d /run/secrets ]; then
    flist="$(mktemp)"
    find /run/secrets -maxdepth 1 -type f -name "CONT_ENV_*" | sort > "${flist}"
    exec 3< "${flist}" # Open for reading on file descriptor 3.
    while read -r fpath; do
        env_var_name="${fpath#/run/secrets/CONT_ENV_}"

        if ! valid_env_var_name "${env_var_name}"; then
            log "invalid environment variable name: ${fname}"
            exit 1
        fi

        echo "loading..." | log_script "${env_var_name}"
        load_env_var "${env_var_name}" "$(head -n1 < "${fpath}")"
    done <&3
    exec 3>&- # Close file descriptor.
    rm "${flist}"
fi
log "container secrets loaded."

# Invoke initialization scripts.
STAGE=cont-init
log "executing container initialization scripts..."
if [ -d /etc/cont-init.d ]; then
    find /etc/cont-init.d -maxdepth 1 -type f | sort | while read -r f; do
        fname="$(basename "${f}")"

        if [ ! -x "${f}" ]; then
            echo "WARNING: not executable, ignoring." | log_script "${fname}"
            continue
        fi

        echo "executing..." | log_script "${fname}"

        rc_file="$(mktemp)"
        (
            set +e
            ${f} 2>&1
            echo $? > "${rc_file}"
        ) | log_script "${fname}"
        read -r rc < "${rc_file}"
        rm -f "${rc_file}"

        if [ "${rc}" -eq 0 ]; then
            echo "terminated successfully." | log_script "${fname}"
        else
            echo "terminated with error ${rc}." | log_script "${fname}"
            exit "${rc}"
        fi
    done
fi
log "all container initialization scripts executed."

# Finally, invoke the process supervisor.
STAGE=init

# Re-build positional parameters to be passed to the process supervisor.
set --
set -- "$@" "--progname"
set -- "$@" "supervisor"
set -- "$@" "--services-gracetime"
set -- "$@" "${SERVICES_GRACETIME:-5000}"
set -- "$@" "--default-service-uid"
set -- "$@" "${USER_ID}"
set -- "$@" "--default-service-gid"
set -- "$@" "${GROUP_ID}"
if is-bool-val-true "${CONTAINER_DEBUG:-0}"; then
    set -- "$@" "--debug"
fi

log "giving control to process supervisor."
exec /opt/base/sbin/cinit "$@"

# vim:ft=sh:ts=4:sw=4:et:sts=4
